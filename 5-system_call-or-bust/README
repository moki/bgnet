5. System Calls
System calls or library calls that allow you to acess the network functionality

5.1 getaddrinfo() - helps setup socket structs

BEFORE one used gethostbyname() to do DNS lookup, then load that info into
struct sockaddr_in by hand, and use that in your calls.
NOW getaddrinfo() does DNS and service name lookups.

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>

int getaddrinfo(const char *node,		// "example.com" or ip
		const char *service,		// "http" or port number
		const struct addrinfo *hints,
		struct addrinfo **res);

three input parameters:
node - host name to connect to or an ip address
service - port number "80" or name "http"/"ftp"(found in /etc/services)
hints - points to a struct addrinfo filled with already relevant information
returns a pointer to a linked-list res of results.

/server-tcp - sample code for tcp server setup
/client-tcp - sample code for tcp client setup

5.2 socket() - get file descriptor

#include <sys/types.h>
#include <sys/socket.h>

int socket(int domain, int type, int protocol);

domain	 - PF_INET | PF_INET6
type	 - SOCK_STREAM | SOCK_DGRAM
protocol - 0 to choose proper protocol for a given type, or call
	   getprotobyname() to look up the protocol you want tcp or udp.

PF_INET(ProtocolFamily) and AF_INET(AddressFamily) might seen
to be used interchangebly but that's not correct way to do things.
PF_INET used for socket call, and AF_INET when initializing struct sockaddr_in
feed values from getaddrinfo() into socket()

int s;
struct addrinfo hints;
struct addrinfo *response;

getaddrinfo("google.com", "http", &hints, &response);
s = socket(response->ai_family, response->ai_socktype, response->ai_protocol);

5.3 bind() associate socket with a port on the machine

#include <sys/types.h>
#include <sys/socket.h>

int bind(int sockfd, struct sockaddr *my_addr, int addrlen);

sockfd  - fd returned by socket()
my_addr - pointer to a struct sockaddr
addrlen - length in bytes of that address

struct addrinfo hints, *response;
int sockfd;

memset(&hints, 0, sizeof(hints));
hints.ai_family = AF_UNSPEC;	 // ipv4 or ipv6
hints.ai_socktype = SOCK_STREAM; // tcp
hints.ai_flags = AI_PASSIVE;	 // fill with localhost

getaddrinfo(NULL, "3490", &hints, &response);

/* get socket fd */
sockfd = socket(response->ai_family, response->ai_socktype, response->ai_protocol);

/* bind it to the port we passed in to getaddrinfo() */
bind(sockfd, response->ai_addr, response->ai_addrlen);

reusing port:

int yes = 1;
if (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1) {
	perror("setsockopt");
	exit(1);
}

if connecting to a remote machine and local port used not important,
one can skip bind to connect(), it'll check to see if socket is unbound
and will bind() it to an unused local port if necessary.
